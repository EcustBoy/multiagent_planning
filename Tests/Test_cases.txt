Test cases for dec-SCP and dec-iSCP - 4 Vehicles
Tobe copied in appropriate place on file decSCP.m

First case:

% Initial positions
po1 = [-1.5,0,0.5];
po2 = [1.5,0,0.5];
po3 = [0,-1,0.5];
po4 = [0, 2,0.5];
po = cat(3,po1,po2,po3,po4);

% Final positions
pf1 = [1.5,2,1.5];
pf2 = [-1.5,2,1.5];
pf3 = [0,2,1.5];
pf4 = [0,-1,1.5];
pf  = cat(3, pf1, pf2,pf3,pf4);

Second case:

% Initial positions
po1 = [-1,-1,1.5];
po2 = [0,-1,1.5];
po3 = [1,-1,1.5];
po4 = [2, -1,1.5];
po = cat(3,po1,po2,po3,po4);

% Final positions
pf1 = [2,2,1.5];
pf2 = [1,2,1.5];
pf3 = [0,2,1.5];
pf4 = [-1,2,1.5];
pf  = cat(3, pf1, pf2,pf3,pf4);

% Time settings and variables
T = 10; % Trajectory final time
h = 0.2; % time step duration
tk = 0:h:T;
K = T/h + 1; % number of time steps
Ts = 0.01; % period for interpolation @ 100Hz
t = 0:Ts:T; % interpolated time vector

% Initial positions
po1 = [-1,-1,1.5];
po2 = [0,-1,1.5];
po3 = [1,-1,1.5];
po4 = [2, -1,1.5];
po5 = [-1,1,1.5];
po6 = [2,0,1.5];
po7 = [-1,0,1.5];
po8 = [2,1,1.5];
po9 = [-1,2,1.5];
po10 = [2,2,1.5];

po = cat(3,po1,po2,po3,po4,po5,po6,po7,po8,po9,po10);

% Final positions
pf1 = [2,2,1.5];
pf2 = [1,2,1.5];
pf3 = [0,2,1.5];
pf4 = [-1,2,1.5];
pf5 = [2,1,1.5];
pf6 = [-1,0,1.5];
pf7 = [2,0,1.5];
pf8 = [-1,1,1.5];
pf9 = [0,-1,1.5];
pf10 = [1,-1,1.5];
pf  = cat(3,pf1,pf2,pf3,pf4,pf5,pf6,pf7,pf8,pf9,pf10);


% Initial positions
po1 = [-1.01,-1,1.5];
po2 = [-1,1,1.5];
po3 = [1.5,-1,1.5];
po4 = [1,1.5,1.5];
po5 = [-1,0,1.5];
po6 = [1,0,1.5];

po = cat(3,po1,po2,po3,po4);

% Final positions
pf1 = [1.01,1,1.5];
pf2 = [1,-1,1.5];
pf3 = [-1.01,1,1.5];
pf4 = [-1,-1.5,1.5];
pf5 = [1.3,0,1.5];
pf6 = [-1,0,1.5];

SIXTEEN DRONE TEST CASE

% Initial positions
po1 = [-2,2,1.5];
po2 = [2,2,1.5];
po3 = [2,-2,1.5];
po4 = [-2,-2,1.5];
po5 = [-2,0,1.5];
po6 = [2,0,1.5];
po7 = [0,2,1.5];
po8 = [0,-2,1.5];
po9 = [-1,2,1.5];
po10 = [1,-2,1.5];
po11 = [2,-1,1.5];
po12 = [-2,1,1.5];
po13 = [1,2,1.5];
po14 = [-1,-2,1.5];
po15 = [2,1,1.5];
po16 = [-2,-1,1.5];

po = cat(3,po1,po2,po3,po4,po5,po6,po7,po8,po9,...
         po10,po11,po12,po13,po14,po15,po16);

N = size(po,3); % number of vehicles

% Final positions
pf1 = [2,-2,1.5];
pf2 = [-2,-2,1.5];
pf3 = [-2,2,1.5];
pf4 = [2,2,1.5];
pf5 = [2,0,1.5];
pf6 = [-2,0,1.5];
pf7 = [0,-2,1.5];
pf8 = [0,2,1.5];
pf9 = [1,-2,1.5];
pf10 = [-1,2,1.5];
pf11 = [-2,1,1.5];
pf12 = [2,-1,1.5];
pf13 = [-1,-2,1.5];
pf14 = [1,2,1.5];
pf15 = [-2,-1,1.5];
pf16 = [2,1,1.5];

pf  = cat(3,pf1,pf2,pf3,pf4,pf5,pf6,pf7,pf8,pf9,...
          pf10,pf11,pf12,pf13,pf14,pf15,pf16);

TEST CASE OF MATRIX
% Initial positions
po1 = [-1,1,1.5];
po2 = [0,1,1.5];
po3 = [1,1,1.5];
po4 = [-1,0,1.5];
po5 = [0,0,1.5];
po6 = [1,0,1.5];
po7 = [-1,-1,1.5];
po8 = [0,-1,1.5];
po9 = [1,-1,1.5];

po = cat(3,po1,po2,po3,po4,po5,po6,po7,po8,po9);

% Final positions
pf1 = po8;
pf2 = po2;
pf3 = po4;
pf4 = po9;
pf5 = po5;
pf6 = po1;
pf7 = po6;
pf8 = po3;
pf9 = po7;

pf  = cat(3,pf1,pf2,pf3,pf4,pf5,pf6,pf7,pf8,pf9);

// 16-VEHICLE MATRIX EXCHANGE

% Initial positions
po1 = [-1,1,1.5];
po2 = [0,1,1.5];
po3 = [1,1,1.5];
po4 = [-1,0,1.5];
po5 = [0,0,1.5];
po6 = [1,0,1.5];
po7 = [-1,-1,1.5];
po8 = [0,-1,1.5];
po9 = [1,-1,1.5];
po10 = [1,2,1.5];
po11 = [0,2,1.5];
po12 = [-1,2,1.5];
po13 = [-2,2,1.5];
po14 = [-2,1,1.5];
po15 = [-2,0,1.5];
po16 = [-2,-1,1.5];

po = cat(3,po1,po2,po3,po4,po5,po6,po7,po8,po9,...
         po10,po11,po12,po13,po14,po15,po16);
N = size(po,3); % number of vehicles
assign = randperm(N);

% Final positions
pf1 = po(:,:,assign(1));
pf2 = po(:,:,assign(2));
pf3 = po(:,:,assign(3));
pf4 = po(:,:,assign(4));
pf5 = po(:,:,assign(5));
pf6 = po(:,:,assign(6));
pf7 = po(:,:,assign(7));
pf8 = po(:,:,assign(8));
pf9 = po(:,:,assign(9));
pf10 = po(:,:,assign(10));
pf11 = po(:,:,assign(11));
pf12 = po(:,:,assign(12));
pf13 = po(:,:,assign(13));
pf14 = po(:,:,assign(14));
pf15 = po(:,:,assign(15));
pf16 = po(:,:,assign(16));

pf  = cat(3,pf1,pf2,pf3,pf4,pf5,pf6,pf7,pf8,pf9,...
          pf10,pf11,pf12,pf13,pf14,pf15,pf16);

// 25 VEHICLE 5X5 MATRIX EXCHANGE TEST CASE

% Initial positions
po1 = [-1,1,1.5];
po2 = [0,1,1.5];
po3 = [1,1,1.5];
po4 = [-1,0,1.5];
po5 = [0,0,1.5];
po6 = [1,0,1.5];
po7 = [-1,-1,1.5];
po8 = [0,-1,1.5];
po9 = [1,-1,1.5];
po10 = [1,2,1.5];
po11 = [0,2,1.5];
po12 = [-1,2,1.5];
po13 = [-2,2,1.5];
po14 = [-2,1,1.5];
po15 = [-2,0,1.5];
po16 = [-2,-1,1.5];
po17 = [-2,-2,1.5];
po18 = [-1,-2,1.5];
po19 = [0,-2,1.5];
po20 = [1,-2,1.5];
po21 = [2,-2,1.5];
po22 = [2,-1,1.5];
po23 = [2,0,1.5];
po24 = [2,1,1.5];
po25 = [2,2,1.5];

po = cat(3,po1,po2,po3,po4,po5,po6,po7,po8,po9,...
         po10,po11,po12,po13,po14,po15,po16,po17,...
         po18,po19,po20,po21,po22,po23,po24,po25);
N = size(po,3); % number of vehicles
assign = randperm(N);

% Final positions
pf1 = po(:,:,assign(1));
pf2 = po(:,:,assign(2));
pf3 = po(:,:,assign(3));
pf4 = po(:,:,assign(4));
pf5 = po(:,:,assign(5));
pf6 = po(:,:,assign(6));
pf7 = po(:,:,assign(7));
pf8 = po(:,:,assign(8));
pf9 = po(:,:,assign(9));
pf10 = po(:,:,assign(10));
pf11 = po(:,:,assign(11));
pf12 = po(:,:,assign(12));
pf13 = po(:,:,assign(13));
pf14 = po(:,:,assign(14));
pf15 = po(:,:,assign(15));
pf16 = po(:,:,assign(16));
pf17 = po(:,:,assign(17));
pf18 = po(:,:,assign(18));
pf19 = po(:,:,assign(19));
pf20 = po(:,:,assign(20));
pf21 = po(:,:,assign(21));
pf22 = po(:,:,assign(22));
pf23 = po(:,:,assign(23));
pf24 = po(:,:,assign(24));
pf25 = po(:,:,assign(25));

pf  = cat(3,pf1,pf2,pf3,pf4,pf5,pf6,pf7,pf8,pf9,...
          pf10,pf11,pf12,pf13,pf14,pf15,pf16,pf17,...
          pf18,pf19,pf20,pf21,pf22,pf23,pf24,pf25);



